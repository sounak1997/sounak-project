{
  "version": 3,
  "sources": ["src/app/services/notification.spec.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\nimport { MatSnackBar } from '@angular/material/snack-bar'; // Import MatSnackBar\nimport { NotificationService } from './notification';\n\ndescribe('NotificationService', () => {\n  let service: NotificationService;\n  let snackBarSpy: jasmine.Spy; // Declare a spy for MatSnackBar\n\n  // Create a mock object for MatSnackBar\n  const mockMatSnackBar = {\n    open: (message: string, action: string, config: any) => {}, // A dummy open method\n  };\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        NotificationService,\n        // Provide the mock MatSnackBar instead of the real one\n        { provide: MatSnackBar, useValue: mockMatSnackBar }\n      ]\n    });\n    service = TestBed.inject(NotificationService);\n\n    // Create a spy on the open method of the mockMatSnackBar\n    snackBarSpy = spyOn(mockMatSnackBar, 'open');\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should display a snackbar with the provided message and default action/duration', () => {\n    const testMessage = 'Test notification message';\n\n    service.displayNotification(testMessage);\n\n    // Expect the snackBarSpy.open method to have been called\n    expect(snackBarSpy).toHaveBeenCalled();\n    // Expect it to have been called with the correct arguments\n    expect(snackBarSpy).toHaveBeenCalledWith(testMessage, 'Dismiss', {\n      duration: 3000,\n      horizontalPosition: 'center',\n      verticalPosition: 'bottom',\n    });\n  });\n\n  it('should display a snackbar with custom action and duration', () => {\n    const testMessage = 'Another test message';\n    const testAction = 'Close';\n    const testDuration = 5000;\n\n    service.displayNotification(testMessage, testAction, testDuration);\n\n    expect(snackBarSpy).toHaveBeenCalledWith(testMessage, testAction, {\n      duration: testDuration,\n      horizontalPosition: 'center',\n      verticalPosition: 'bottom',\n    });\n  });\n});"],
  "mappings": ";;;;;;;;;;;;;AAAA;AACA;AACA;AAEA,SAAS,uBAAuB,MAAK;AACnC,MAAI;AACJ,MAAI;AAGJ,QAAM,kBAAkB;IACtB,MAAM,CAAC,SAAiB,QAAgB,WAAe;IAAE;;;AAG3D,aAAW,MAAK;AACd,YAAQ,uBAAuB;MAC7B,WAAW;QACT;;QAEA,EAAE,SAAS,aAAa,UAAU,gBAAe;;KAEpD;AACD,cAAU,QAAQ,OAAO,mBAAmB;AAG5C,kBAAc,MAAM,iBAAiB,MAAM;EAC7C,CAAC;AAED,KAAG,qBAAqB,MAAK;AAC3B,WAAO,OAAO,EAAE,WAAU;EAC5B,CAAC;AAED,KAAG,mFAAmF,MAAK;AACzF,UAAM,cAAc;AAEpB,YAAQ,oBAAoB,WAAW;AAGvC,WAAO,WAAW,EAAE,iBAAgB;AAEpC,WAAO,WAAW,EAAE,qBAAqB,aAAa,WAAW;MAC/D,UAAU;MACV,oBAAoB;MACpB,kBAAkB;KACnB;EACH,CAAC;AAED,KAAG,6DAA6D,MAAK;AACnE,UAAM,cAAc;AACpB,UAAM,aAAa;AACnB,UAAM,eAAe;AAErB,YAAQ,oBAAoB,aAAa,YAAY,YAAY;AAEjE,WAAO,WAAW,EAAE,qBAAqB,aAAa,YAAY;MAChE,UAAU;MACV,oBAAoB;MACpB,kBAAkB;KACnB;EACH,CAAC;AACH,CAAC;",
  "names": []
}
